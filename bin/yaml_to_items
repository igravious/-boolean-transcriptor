#!/usr/bin/env runner

# use my own runner
# see https://rails.lighthouseapp.com/projects/8994/tickets/4249-rails-runner-cant-be-used-in-shebang-lines

# it'd be nice if i left a comment for myself telling myself what this does

DATA_SECTION = "data"
NEXT_LEVEL = "part"

def update_item i
    # find model
    m = Item.where('fa_seq = ? AND fa_structure = ?', i.fa_seq, i.fa_structure)
    # do we match? 
    if m.length > 1
        raise "Whoa Betsy"
    elsif m.length == 1
        m = m.first
        # are all attributes equal or if not are the attrs in db `blank'?
        h = {}
        if m.description != i.description and m.description.nil?
            puts "description is blank!"
            h[:description] = i.description
        end
        if m.pp != i.pp and m.pp.nil?
            puts "pp is blank!"
            h[:pp] = i.pp
        end
        # TODO figure out why date doesn't trigger
        if m.item_date != i.item_date and m.item_date.nil?
            puts "item_date is blank!"
            h[:item_date] = i.item_date
        end
        if m.size != i.size and m.size.nil?
            puts "size is blank!"
            h[:size] = i.size
        end
        if m.commentary != i.commentary and m.commentary.nil?
            puts "commentary is blank!"
            h[:commentary] = i.commentary
        end
        if h == {}
            puts "nothing to update for: #{i.fa_seq}"
        else
            if not (m.update_attributes h)
                # handle failure, be noisy
                raise "object is invalid. unable to update: #{i.fa_seq}"
            else
                puts "successfully updated: #{i.fa_seq} - #{h.inspect}"
            end
        end
    else
        # we have a situation where our identifying columns don't match
        # possibly new item in the db, only insert if told to
        if @match_only
            raise "If we are updating we really should match!"
        else
            # unusual case so be noisy
            puts "Looks like I found new item (or sub item) in update mode, inserting: #{i.fa_seq}"
            i.save!
        end
    end
    m
end

def new_item item, struct, sub
    i = Item.new
    i.fa_seq = item["name"] #-
    i.fa_structure = struct+"#{sub}" #-

    i.description = item["desc"] #-
    pp = item["pp"] #-
    i.pp = pp
    begin
        pp = pp.split(' ')
        i.pp_extra = pp[1] #-
    rescue
        # do nufink
    end
    # date validation !!
    i.item_date = item["date"] #-
    i.size = item["size"] #-
    i.commentary = item["note"] #-
    i.also = item["also"] #-
    i.range = item["to"] #-
    i.month = item["month"] #-
    i
end

def go_into_level level, struct
    level.each do |section|
        # p section 

        # print "__section__\n"
        # p section

        sub = section["sub"]
        label = section["label"]

        # print "__sub__\n"
        # p sub
        # print "__label__\n"
        # p label

        next_level = section[NEXT_LEVEL]
        if next_level.nil?
            items = section["items"]
            if items.nil?
                puts "Error in control file" # where would be a nice touch
                exit 1
            else
                items.each do |item|
                    i = new_item item, struct, sub
                    if @update
                        i = update_item i
                    else
                        puts "about to insert new item: #{i.fa_seq}"
                        i.save!
                    end
                    sub_item = item[NEXT_LEVEL]
                    if !sub_item.nil?
                        puts "found sub item(s) for #{i.fa_seq}"
                        sub_item.each do |item|
                            # struct and sub remain the same
                            j = new_item item, struct, sub
                            j.sub = i.id
                            # puts "debug: inspecting sub: #{j.inspect}"
                            if @update
                                j = update_item j
                            else
                                puts "about to insert new sub item: #{j.fa_seq}"
                                j.save!
                            end
                        end
                    end
                end
            end
        else
            go_into_level(next_level, struct+"#{sub}.")
        end
    end
end

require 'getoptlong'

opts = GetoptLong.new(
  [ '--help', '-h', GetoptLong::NO_ARGUMENT ],
  [ '--update', '-u', GetoptLong::NO_ARGUMENT ],
  [ '--match-only', '-m', GetoptLong::NO_ARGUMENT ]
)

def usage

    <<-EOS
#{File.basename($0)} [OPTION]

-h, --help:
   show help

--update, -u:
   update database if record already exists, only updates if db attribute is `blank'
    EOS

end

@update = false
@match_only = false

begin
    opts.each do |opt, arg|
      case opt
        when '--help'
          puts usage
        when '--update'
          puts "switching on update rather than insert"
          @update = true
        when '--match-only'
          puts "strict matching on update"
          @match_only = true
      end
    end
rescue Exception => e
    # getops is noisy
    puts usage
    # dunno if you can use return from here
    exit 2
end

begin
    yml_file = 'db/Gold_Finding_Aid.yml'
    thing = YAML.load_file(yml_file)
    puts "#{yml_file} loaded"

    top_level = thing[DATA_SECTION]
    raise "no data" if !top_level

    go_into_level(top_level, "")
rescue Exception => e
    puts e
    exit 3
end

exit 0

# http://vim.wikia.com/wiki/Modeline_magic
# http://www.lornajane.net/posts/2011/using-modelines-in-vim
# note trailing : (the colon symbol, the coder's symbolic enema)

# vim: set syntax=ruby:
