<!--
  display items grouped by number of scans

  if you are using group by you need some aggregate function 
  (like sum, or count)
-->

<%- content_for(:head) do -%>
    <%# javascript_include_tag "lazyload.min", "data-turbolinks-track" => false # doesn't load all images in a long scrollable div %>
    <%= javascript_include_tag "jquery.lazyload", "data-turbolinks-track" => TURBO %>

    <%= stylesheet_link_tag "captionss.min", media: "all", "data-turbolinks-track" => TURBO %>
<%- end -%>

<%= render '/per_view_javascript' %>

<%= render 'breadcrumb' %>

<fieldset>
    <legend>
        <!-- translate these -->
        Ordered by number of scans per item
    </legend>
    <ol class="list-group">
    <%
    	link_name = "without scans!"
        @items = Item.all_except_sub.where('not exists (select null from scans where scans.item_id = items.id)')
	%>
        <li class="list-group-item"><span class="badge"><%= link_name %></span>
        <%= render "items_slider_shim" %> 
        </li>
	<%	
		require 'monkey_patch_hash'
        @all_scans.group(:item_id).count.safe_invert.sort.each do |count, ary_of_id|
            #state_label = state ? Scan::STATE_STRING[state] : "unknown state"
            link_name = "#{pluralize(count, 'scan')}"
            #@scans = @all_scans.where("item_id = ?", item_id)
            @items = Item.find(ary_of_id)
    %>
            <li class="list-group-item"><span class="badge"><%= link_name %></span>
            <%= render "items_slider_shim" %> 
            </li>
    <%
        end
    %>
    </ol>
</fieldset>
